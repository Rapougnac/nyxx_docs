"use strict";(self.webpackChunknyxx_docs=self.webpackChunknyxx_docs||[]).push([[83],{9613:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var a=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),l=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(m.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),p=o,h=u["".concat(m,".").concat(p)]||u[p]||c[p]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4846:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return m},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var a=t(2182),o=t(9028),r=(t(9496),t(9613)),i=["components"],s={title:"Command handling",author:"Rapougnac",timestamp:new Date("2022-03-25T00:00:00.000Z"),category:"guides",sidebar_position:8},m=void 0,l={unversionedId:"guides/command_handling",id:"guides/command_handling",title:"Command handling",description:"Command handling is, by definition, a way to handle commands in multiple files.",source:"@site/docs/guides/command_handling.md",sourceDirName:"guides",slug:"/guides/command_handling",permalink:"/docs/guides/command_handling",editUrl:"https://github.com/Rapougnac/nyxx_docs/tree/docusaurus/docs/guides/command_handling.md",tags:[],version:"current",lastUpdatedBy:"Rapougnac",lastUpdatedAt:1652773645,formattedLastUpdatedAt:"5/17/2022",sidebarPosition:8,frontMatter:{title:"Command handling",author:"Rapougnac",timestamp:"2022-03-25T00:00:00.000Z",category:"guides",sidebar_position:8},sidebar:"guideSidebar",previous:{title:"Slash commands",permalink:"/docs/guides/slash_commands"},next:{title:"Dart resources",permalink:"/docs/resources/"}},d={},c=[{value:"Creation of client",id:"creation-of-client",level:2},{value:"Creating our CommandsPlugin",id:"creating-our-commandsplugin",level:2},{value:"Registering a command",id:"registering-a-command",level:2},{value:"Adding a command to the CommandsPlugin",id:"adding-a-command-to-the-commandsplugin",level:3},{value:"Registering a command group",id:"registering-a-command-group",level:2},{value:"Using command arguments",id:"using-command-arguments",level:2},{value:"Using converters",id:"using-converters",level:2},{value:"Using custom converters",id:"using-custom-converters",level:2},{value:"Using fully custom converters",id:"using-fully-custom-converters",level:3},{value:"Using assembled converters",id:"using-assembled-converters",level:3},{value:"Using optional arguments",id:"using-optional-arguments",level:2},{value:"Using checks",id:"using-checks",level:2},{value:"Using converters override",id:"using-converters-override",level:2}],u={toc:c};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"command-handling"},"Command handling"),(0,r.kt)("p",null,"Command handling is, by definition, a way to handle commands in multiple files.\nBecause by creating a lot of commands, your code in your main file will start to get really big and have a if/else if/switch hell."),(0,r.kt)("p",null,"Unlike many other languages, Dart does ",(0,r.kt)("strong",{parentName:"p"},"not")," have a way to dynamically \u2014 only known at runtime \u2014 import files.\nBut don't worry, there's still a way to handle properly your commands, slash commands and legacy commands.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nyxx-discord/nyxx_commands/tree/main"},(0,r.kt)("inlineCode",{parentName:"a"},"nyxx_commands"))," is a library that can handle commands for you."),(0,r.kt)("h2",{id:"creation-of-client"},"Creation of client"),(0,r.kt)("p",null,"Let's setup a basic example, first, we need to create our client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"//highlight-next-line\nimport 'package:nyxx/nyxx.dart';\n\nvoid main() {\n  //highlight-start\n  // nyxx_commands doesn't support INyxxRest yet, so we need to use INyxxWebsocket.\n  final client = NyxxFactory.createNyxxWebsocket(\n    '<TOKEN>',\n    GatewayIntents.allUnprivileged | GatewayIntents.guildMembers,\n  );\n  //highlight-end\n}\n")),(0,r.kt)("p",null,"Now, by convenience, we register the basic plugins.\nThese aren't required for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nyxx-discord/nyxx_commands/tree/main"},(0,r.kt)("inlineCode",{parentName:"a"},"nyxx_commands"))," to work"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:nyxx/nyxx.dart';\n\nvoid main() {\n  // nyxx_commands doesn't support INyxxRest yet, so we need to use INyxxWebsocket.\n  final client = NyxxFactory.createNyxxWebsocket(\n    '<TOKEN>',\n    GatewayIntents.allUnprivileged | GatewayIntents.guildMembers,\n  );\n\n  //highlight-start\n  client\n    ..registerPlugin(Logging())\n    ..registerPlugin(CliIntegration())\n    ..registerPlugin(IgnoreExceptions());\n  //highlight-end\n}\n")),(0,r.kt)("h2",{id:"creating-our-commandsplugin"},"Creating our ",(0,r.kt)("a",{parentName:"h2",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/CommandsPlugin-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CommandsPlugin"))),(0,r.kt)("p",null,"Ok, so now, we have client ready to be used, but we didn't used ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nyxx-discord/nyxx_commands/tree/main"},(0,r.kt)("inlineCode",{parentName:"a"},"nyxx_commands"))," after all. So let's get into it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:nyxx/nyxx.dart';\n//highlight-next-line\nimport 'package:nyxx_commands/nyxx_commands.dart';\n\nvoid main() {\n  // nyxx_commands doesn't support INyxxRest yet, so we need to use INyxxWebsocket.\n  final client = NyxxFactory.createNyxxWebsocket(\n    '<TOKEN>',\n    GatewayIntents.allUnprivileged | GatewayIntents.guildMembers,\n  );\n\n  client\n    ..registerPlugin(Logging())\n    ..registerPlugin(CliIntegration())\n    ..registerPlugin(IgnoreExceptions());\n\n  //highlight-start\n  // Next, we need to create our plugin. The plugin class used for nyxx_commands is `CommandsPlugin`\n  // and we need to store it in a variable to be able to access it for registering commands and\n  // converters.\n\n  CommandsPlugin commands = CommandsPlugin(\n    // The `prefix` parameter determines what prefix nyxx_commands will use for text commands.\n    //\n    // It isn't a simple string but a function that takes a single argument, an `IMessage`, and\n    // returns a `String` indicating what prefix to use for that message. This allows you to have\n    // different prefixes for different messages, for example you might want the bot to not require\n    // a prefix when in direct messages. In that case, you might provide a function like this:\n    // ```dart\n    // prefix: (message) {\n    //   if (message.startsWith('!')) {\n    //     return '!';\n    //   } else if (message.guild == null) {\n    //     return '';\n    //   }\n    // }\n    //```\n    //\n    // In this case, we always return `!` meaning that the prefix for all messages will be `!`.\n    prefix: (message) => '!',\n\n    // The `guild` parameter determines what guild slash commands will be registered to by default.\n    //\n    // This is useful for testing since registering slash commands globally can take up to an hour,\n    // whereas registering commands for a single guild is instantaneous.\n    //\n    // If you aren't testing or want your commands to be registered globally, either omit this\n    // parameter or set it to `null`.\n    guild: Snowflake(Platform.environment['GUILD']!),\n\n    // The `options` parameter allows you to specify additional configuration options for the\n    // plugin.\n    //\n    // Generally you can just omit this parameter and use the defaults, but if you want to allow for\n    // a specific behaviour you can include this parameter to change the default settings.\n    //\n    // In this case, we set the option `logErrors` to `true`, meaning errors that occur in commands\n    // will be sent to the logger. If you have also added the `Logging` plugin to your client, these\n    // will then be printed to your console.\n    // `true` is actually the default for this option and was included here for the sake of example.\n    options: CommandsOptions(\n      logErrors: true,\n    ),\n  );\n\n  // Next, we add the commands plugin to our client:\n  client.registerPlugin(commands);\n\n\n  // Finally, we tell the client to connect to Discord:\n  client.connect();\n  //highlight-end\n}\n")),(0,r.kt)("h2",{id:"registering-a-command"},"Registering a command"),(0,r.kt)("p",null,"To register a command, we must first create an instance of the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ChatCommand"))," class.\nThis class represents a single command, slash command or not, and once added to the bot will\nautomatically be ready to use."),(0,r.kt)("p",null,"For our first command, let's create the famous ",(0,r.kt)("inlineCode",{parentName:"p"},"ping")," command that'll reply with ",(0,r.kt)("inlineCode",{parentName:"p"},"pong"),"."),(0,r.kt)("p",null,"The first parameter is the command name.\nCommand names must obey certain rules, if they don't an error will be thrown.\nGenerally, using lower case letters and dashes (",(0,r.kt)("inlineCode",{parentName:"p"},"-"),") instead of spaces or undersoces will avoid any problems."),(0,r.kt)("br",null),"The second parameter is the command description. In traditional command frameworks, command descriptions aren't required. However, Discord requires that all slash commands have a description, so it is needed in nyxx_commands.",(0,r.kt)("br",null),"The third parameter is the function that will be executed when the command is ran.",(0,r.kt)("p",null,"The first parameter to this function must be a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/IChatContext-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"IChatContext")),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/IChatContext-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"IChatContext"))," allows you to access various information about how the command was run: the user that executed it, the guild it was ran in and a few other useful pieces of information.\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/IChatContext-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"IChatContext"))," also has a couple of methods that make it easier to respond to commands.\nSince a ping command doesn't have any other arguments, we don't add any other parameters to the function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// Finally, we tell the client to connect to Discord:\nclient.connect();\n\n//highlight-start\nChatCommand ping = ChatCommand(\n  'ping',\n  \"Checks if the bot's online\",\n  (IChatContext context) {\n    // For a ping command, all we need to do is respond with `pong`.\n    // To do that, we can use the `Context`'s `respond` method which responds to the command with\n    // a message.\n    context.respond(MessageBuilder.content('pong!'));\n  },\n);\n//highlight-end\n")),(0,r.kt)("h3",{id:"adding-a-command-to-the-commandsplugin"},"Adding a command to the ",(0,r.kt)("a",{parentName:"h3",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/CommandsPlugin-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CommandsPlugin"))),(0,r.kt)("p",null,"Once we've created our command, we need to add it to our bot."),(0,r.kt)("p",null,"The commands on a bot can be represented with a parent-child tree that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client\n\u2517\u2501 ping\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"ChatCommand ping = ChatCommand(\n  'ping',\n  \"Checks if the bot's online\",\n  (IChatContext context) {\n    // For a ping command, all we need to do is respond with `pong`.\n    // To do that, we can use the `Context`'s `respond` method which responds to the command with\n    // a message.\n    context.respond(MessageBuilder.content('pong!'));\n  },\n);\n\n//highlight-next-line\ncommands.addCommand(ping);\n")),(0,r.kt)("p",null,'At this point, if you run this file, you should see a slash command named "ping" appear in\nDiscord. Executing it should make the bot send ',(0,r.kt)("inlineCode",{parentName:"p"},"pong!")," to the channel the command was executed\nin.\nYou can also send a text message starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"!ping")," and you should see a similar result."),(0,r.kt)("br",null),(0,r.kt)("p",null,"If you don't want to be mentionned, you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/MessageChatContext/respond.html"},(0,r.kt)("inlineCode",{parentName:"a"},"mention"))," option in the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/MessageChatContext-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"MessageChatContext")),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/MessageChatContext/respond.html"},(0,r.kt)("inlineCode",{parentName:"a"},"respond")),"\nLike so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"//highlight-next-line\ncontext.respond('pong!', mention: false);\n")),(0,r.kt)("br",null),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You must check if the context is a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/MessageChatContext-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"MessageChatContext"))," to apply the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/MessageChatContext/respond.html"},(0,r.kt)("inlineCode",{parentName:"a"},"mention"))," parameter."))),(0,r.kt)("h2",{id:"registering-a-command-group"},"Registering a command group"),(0,r.kt)("p",null,"Command groups are a powerful tool that allow you to group commands together.\nAs an example, we'll create a command group ",(0,r.kt)("inlineCode",{parentName:"p"},"throw")," with two sub-commands: ",(0,r.kt)("inlineCode",{parentName:"p"},"coin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"die")," (\nthe singular form of dice, not the verb).\nOur command structure will look like this once we're done (the ping command we made earlier is\nstill there):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client\n\u2517\u2501 ping\n\u2517\u2501 throw\n   \u2517\u2501 coin\n   \u2517\u2501 die\n")),(0,r.kt)("p",null,"Ok, so, let's create our first command group."),(0,r.kt)("p",null,"Similarly to ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ChatCommand")),", the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatGroup-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ChatGroup"))," constructor's first two arguments are the group's name\nand description."),(0,r.kt)("p",null,"However, there is no ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute"))," parameter; groups are not commands, and as such cannot be run,\nso it makes no sense to have a function to execute. ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatGroup/children.html"},(0,r.kt)("inlineCode",{parentName:"a"},"children"))," is an optional parameter that allows you to specify what commands are part of this\ngroup. It isn't the only way to add commands to a group though, so we'll add the ",(0,r.kt)("inlineCode",{parentName:"p"},"throw coin"),"\nmethod here and the ",(0,r.kt)("inlineCode",{parentName:"p"},"throw die")," command later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"//highlight-start\n// We have to use the variable name `throwGroup` since `throw` is a reserved keyword. Note that\n// the variable name does not change how the group behaves at all though.\nChatGroup throwGroup = ChatGroup(\n  'throw',\n  'Throw an object',\n  children: [\n    // We create a command in the same way as we created the `ping` command earlier.\n    ChatCommand(\n      'coin',\n      'Throw a coin',\n      (IChatContext context) {\n        bool heads = Random().nextBool();\n\n        context.respond(\n          MessageBuilder.content('The coin landed on its ${heads ? 'head' : 'tail'}!'),\n        );\n      },\n    )\n  ],\n);\n//highlight-end\n")),(0,r.kt)("p",null,"There's another way to add a command to a group. It's by using the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatGroup-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ChatGroup")),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatGroup/addCommand.html"},(0,r.kt)("inlineCode",{parentName:"a"},"addCommand"))," method."),(0,r.kt)("p",null,"Like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"//highlight-start\nthrowGroup.addCommand(\n  ChatCommand(\n    'die',\n    'Throw a die',\n    (IChatContext context) {\n      int number = Random().nexInt(6) + 1;\n\n      context.respond(MessageBuilder.content('The die landed on the $number!'));\n    }\n  ),\n);\n//highlight-end\n\n// Finally, just like the `ping` command, we need to add our command group to the bot:\n//highlight-next-line\ncommands.addCommand(throwGroup);\n")),(0,r.kt)("p",null,"At this point, if you run this file, a new command should have appeared in the slash command menu on Discord: ",(0,r.kt)("inlineCode",{parentName:"p"},"throw"),". Selecting it will let you choose from two sub-commands: ",(0,r.kt)("inlineCode",{parentName:"p"},"coin")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"die"),". Executing either of them should result in the bot sending a message with a random\noutcome!"),(0,r.kt)("p",null,"You can also send a text message starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"!throw coin")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"!throw die")," to execute the\ncommands. "),(0,r.kt)("h2",{id:"using-command-arguments"},"Using command arguments"),(0,r.kt)("p",null,"Command argumens are another powerful tool that allow you to get user input when using commands.\nAdding arguments to your commands in nyxx_commands is simple, just add the argument as a\nparameter to your ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute"))," function and nyxx_commands will do the rest, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Converting the parameter name to a Discord-friendly name;"),(0,r.kt)("li",{parentName:"ul"},"Converting user input to the correct type;"),(0,r.kt)("li",{parentName:"ul"},"Inferring the best Discord slash command argument type to use for that argument")),(0,r.kt)("p",null,"As an example, let's implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"say")," command that simply repeats what the user input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"ChatCommand say = ChatCommand(\n  'say',\n  'Make the bot say something',\n\n  // As mentioned earlier, all we need to do to add an argument to our command is add it as a\n  // parameter to our execute function. In this case, we take an argument called `message` and of\n  // type `String`.\n  (Context context, String message) {\n    context.respond(MessageBuilder.content(message));\n  },\n);\n\n// As usual, we need to register the command to our bot.\ncommands.addCommand(say);\n")),(0,r.kt)("p",null,"At this point, if you run this file your command structure will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client\n\u2517\u2501 ping\n\u2517\u2501 throw\n   \u2517\u2501 coin\n   \u2517\u2501 die\n\u2517\u2501 say\n")),(0,r.kt)("p",null,"A new command will also have appeared in Discord: ",(0,r.kt)("inlineCode",{parentName:"p"},"say"),". Notice that this new command has an\nargument, and Discord won't let you execute it unless your provide a value for that argument."),(0,r.kt)("p",null,"As usual, you can also execute the command with a message starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"!say"),".\nHowever, if you try to run the command with a message that just says ",(0,r.kt)("inlineCode",{parentName:"p"},"!say"),", you will notice an\nerror is thrown in your console. This is because you didn't provide a value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"\nargument.\nSending ",(0,r.kt)("inlineCode",{parentName:"p"},"!say hi")," will result in the bot sending a message ",(0,r.kt)("inlineCode",{parentName:"p"},"hi")," as expected."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Sending ",(0,r.kt)("inlineCode",{parentName:"p"},"!say hello, nyxx_commands!")," will only make the bot send\na message with ",(0,r.kt)("inlineCode",{parentName:"p"},"hello,"),". This is because the string parser assumes that one word = one\nargument. To avoid this, put quotes around your argument to tell nyxx_commands that until the\nnext quote, all characters should be treated as a single argument (escaping quotes is\nsupported).\nRunning ",(0,r.kt)("inlineCode",{parentName:"p"},'!say "hello, nyxx_commands!"')," results in ",(0,r.kt)("inlineCode",{parentName:"p"},"hello, nyxx_commands!")," being sent as expected."))),(0,r.kt)("h2",{id:"using-converters"},"Using converters"),(0,r.kt)("p",null,"Converters allow you to convert user input to specific Dart types. In the previous example, no conversion was needed as input received from Discord is already a ",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.16.2/dart-core/String-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"String")),".\nHowever, the input received from Discord might not always be the type you need it to be. To\nconvert the input from Discord to the type needed for your ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute"))," function, the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/Converter-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter")),"\nclass is used."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nyxx-discord/nyxx_commands/tree/main"},"nyxx_commands")," registers a few converters by default for commonly used types such as ",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.16.2/dart-core/int-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"int")),"s,\n",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.16.2/dart-core/double-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"double")),"s, ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx/latest/nyxx/IMember-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"IMember")),"s and others. We'll look into creating custom converters later, and for now\njust use the built-in converters.\nUsing converters is just as simple as using arguments: simply specify the argument name and\ntype, and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nyxx-discord/nyxx_commands/tree/main"},"nyxx_commands")," will determine which ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/Converter-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter"))," to use for that argument."),(0,r.kt)("p",null,"As an example, let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"nick")," command that changes a user's nickname."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"ChatCommand nick = ChatCommand(\n  'nick',\n  \"Change a user's nickname\",\n  // Setting the type of the `target` parameter to `IMember` will make nyxx_commands convert user\n  // input to instances of `IMember`.\n  (IChatContext context, IMember target, String newNick) async {\n    try {\n      await target.edit(nick: newNick);\n    } on IHttpResponseError {\n      context.respond(MessageBuilder.content(\"Couldn't change nickname :/\"));\n      return;\n    }\n    context.respond(MessageBuilder.content('Successfully changed nickname!'));\n  },\n);\n\ncommands.addCommand(nick);\n")),(0,r.kt)("p",null,"At this point, if you run the file your command structure will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"client\n\u2517\u2501 ping\n\u2517\u2501 throw\n   \u2517\u2501 coin\n   \u2517\u2501 die\n\u2517\u2501 say\n\u2517\u2501 nick\n")),(0,r.kt)("p",null,"A new ",(0,r.kt)("inlineCode",{parentName:"p"},"nick")," command will have been added to Discord's slash command menu. Selecting it will\nprompt you for both a target and a new nickname.\nNotice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," argument will only allow you to select members of the guild the\ncommand was ran in:\nnyxx_commands automatically selected an appropriate slash command argument type for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"target")," parameter."),(0,r.kt)("p",null,"Also notice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"newNick")," argument name was changed to ",(0,r.kt)("inlineCode",{parentName:"p"},"new-nick"),". nyxx_commands will\nautomatically convert your camelCase dart identifiers to Discord-compatible kebab-case argument\nnames, meaning you can keep your code clean without issues."),(0,r.kt)("p",null,"You can also run the command from a text message, with ",(0,r.kt)("inlineCode",{parentName:"p"},"!nick *target* *new-nick*"),". Unlike\nslash commands, there is no way to filter user input before it gets to our bot, so we might end\nup with an invalid input.\nIf that is the case, the converter for ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx/latest/nyxx/IMember-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"IMember"))," will be unable to convert the user input to a\nvalid member, and the command will fail with an exception."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that the bot must have the ",(0,r.kt)("inlineCode",{parentName:"p"},"MANAGE_MEMBERS")," permission and have a higher role than the\ntarget user for this command to succeed."))),(0,r.kt)("h2",{id:"using-custom-converters"},"Using custom converters"),(0,r.kt)("p",null,"Custom converters allow you to specify a custom way of converting user input to a specific type\nthat you can then use in your commands. You can define a custom converter in a few ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By creating your own converter from scratch;"),(0,r.kt)("li",{parentName:"ul"},"By extending an existing converter;"),(0,r.kt)("li",{parentName:"ul"},"By combining existing converters")),(0,r.kt)("p",null,"As an example, we will create converters for two enums defined at the bottom of this file:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Shape")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension"),"."),(0,r.kt)("h3",{id:"using-fully-custom-converters"},"Using fully custom converters"),(0,r.kt)("p",null,"To start off, we will create a converter for ",(0,r.kt)("inlineCode",{parentName:"p"},"Shape"),"s. We will need to create a brand new\nconverter from scratch for this, since no existing converter can be mapped to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Shape"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"enum Shape {\n  triangle,\n  square,\n  pentagon,\n}\n\n\n// Note that the variable is fully  typed, the typed generics on `Converter` are filled in.\n// This allows nyxx_commands to know what the target type of this converter is.\nConverter<Shape> shapeConverter = Converter<Shape>(\n  // The first parameter to the `Converter` constructor is a function.\n  // This function is what actually does the converting, and can return two things:\n  // - An instance of the target type (in this case, `Shape`), indicating success;\n  // - `null`, indicating failure (input cannot be parsed)\n  //\n  // The first parameter to the function is an instance of `StringView`. `StringView` allows you\n  // to manipulate and extract data from a `String`, but also allows the next converter to know\n  // where to start parsing its argument from.\n  // The second parameter is the current `Context` in which the argument is being parsed.\n  (view, context) {\n    // In our case, we want to return a `Shape` based on the user's input. The `getQuotedWord()`\n    // will get the next quoted word from the input.\n    // Note that although `getWord()` exists, you shouldn't use it unless you have to as it can\n    // mess up argument parsing later down the argument parsing.\n    switch (view.getQuotedWord().toLowerCase()) {\n      case 'triangle':\n        return Shape.triangle;\n      case 'square':\n        return Shape.square;\n      case 'pentagon':\n        return Shape.pentagon;\n      default:\n        // The input didn't match anything we know, so we assume the input is invalid and return\n        // `null` to indicate failure.\n        return null;\n    }\n  },\n  // The second parameter to the `Converter` constructor is a list (or any iterable) of\n  // nyxx_interaction's `ArgChoiceBuilder`, allowing you to specify the choices that will be shown\n  // to the user when running this command from a slash command.\n  choices: [\n    ArgChoiceBuilder('Triangle', 'triangle'),\n    ArgChoiceBuilder('Square', 'square'),\n    ArgChoiceBuilder('Pentagon', 'pentagon'),\n  ],\n);\n\n\n// Once we've created our converter, we need to add it to the bot:\ncommands.addConverter(shapeConverter);\n")),(0,r.kt)("h3",{id:"using-assembled-converters"},"Using assembled converters"),(0,r.kt)("p",null,"For our ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension")," converter, we can extend an existing converter: all ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension"),"s are\nintegers, so we can just extend the already existing ",(0,r.kt)("inlineCode",{parentName:"p"},"intConverter")," and transform the integer\nto a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"enum Dimension {\n  twoD,\n  threeD,\n}\n\n// To extend an existing `Converter`, we can use the `CombineConverter` class. This takes an\n// exising converter and a function to transform the output of the original converter to the\n// target type.\n// Similarly to the shape converter, this variable has to be fully typed. The first type argument\n// for `CombineConverter` is the target type of the inital `Converter`, and the second is the\n// target type of the `CombineConverter`.\nConverter<Dimension> dimensionConverter = CombineConverter<int, Dimension>(\n  intConverter,\n  // Also like `Converter`, the second parameter to the transform function is the current context.\n  (number, context) {\n    switch (number) {\n      case 2:\n        return Dimension.twoD;\n      case 3:\n        return Dimension.threeD;\n      default:\n        return null;\n    }\n  },\n);\n")),(0,r.kt)("p",null,"At this point, if you run the file you will see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"favourite-shape")," command has been\nadded to the slash command menu.\nSelecting this command, you will be prompted to select a shape from the choices we outlined\nearlier and a dimension. Note that in this case Discord isn't able to give us choices since we\nhaven't told it what dimensions are availible."),(0,r.kt)("p",null,"If you run the command, you will see that your input will automatically be converted to a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Shape")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension")," by using the converters we defined earlier.\nSimilarly to when we created the ",(0,r.kt)("inlineCode",{parentName:"p"},"nick")," command, if either of our converters fail the command\nwill fail with an error."),(0,r.kt)("h2",{id:"using-optional-arguments"},"Using optional arguments"),(0,r.kt)("p",null,"Optional argument allow you to allow the user to input something while providing a default\nvalue.\nLike converters, optional arguments are easy to use; just make the parameter in your ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute")),"\nfunction optional."),(0,r.kt)("p",null,"You must use optional parameters and not named parameters in the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/ChatCommand/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute"))," function as the\norder matters when using text commands. Note that when using slash commands, users can specify\noptional arguments in any order and can omit certain optional arguments. nyxx_commands will fix\nthe ordering of the arguments, however you are not guaranteed to receive all optional arguments\nup to the last one positionally."),(0,r.kt)("p",null,"As an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"(IChatContext context, [String? a, String? b, String? c]) {}\n")),(0,r.kt)("p",null,"In this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," having a value does not guarantee ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," has a value. As such, it is always better to provide a default for your optional parameters instead of making them nullable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// As an example for using optional arguments, let's create a command with an optional argument:\nChatCommand favouriteFruit = ChatCommand(\n  'favourite-fruit',\n  'Outputs your favourite fruit',\n  (IChatContext context, [String favourite = 'apple']) {\n    context.respond(MessageBuilder.content('Your favourite fruit is $favourite!'));\n  },\n);\n\ncommands.addCommand(favouriteFruit);\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"At this point, if you run the file you will be able to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"favourite-fruit")," command. Once\nyou've selected the command in the slash command menu, you'll be given an option to provide a\nvalue for the ",(0,r.kt)("inlineCode",{parentName:"p"},"favourite")," argument.\nIf you don't specify a value for the argument, the default value of ",(0,r.kt)("inlineCode",{parentName:"p"},"'apple'")," will be used. If\nyou do specify a value, that value will be used instead."),(0,r.kt)("p",null,"Using optional arguments in text commands works as expected: arguments are parsed from the user\ninput until there is no text left to parse or all possible arguments. This means that if you\nwant to specify an optional argument, you just have to type it in as you would with a\nnon-optional argument and the arguments will be filled in left to right in the order they were\ndeclared."),(0,r.kt)("h2",{id:"using-checks"},"Using checks"),(0,r.kt)("p",null,"Command checks allow you to restrict a command's usage. There are a few built-in checks that\nintegrate with Discord's slash command permissions, and a special cooldown check."),(0,r.kt)("p",null,"As an example, we'll create a command with a cooldown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"ChatCommand alphabet = ChatCommand(\n  'alphabet',\n  'Outputs the alphabet',\n  (IChatContext context) {\n    context.respond(MessageBuilder.content('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n  },\n  // Since this command is spammy, we can use a cooldown to restrict it's usage:\n  checks: [\n    CooldownCheck(\n      CooldownType.user,\n      Duration(seconds: 30),\n    )\n  ],\n);\n\ncommands.addCommand(alphabet);\n")),(0,r.kt)("h2",{id:"using-converters-override"},"Using converters override"),(0,r.kt)("p",null,"Converter overrides allow you to override which ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/Converter-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter"))," is used to convert a specific argument.\nThey can be used, for example, to filter the output of a converter so that only certain\ninstances are ever passed to the function.\nYou might have noticed that if we run the command ",(0,r.kt)("inlineCode",{parentName:"p"},'!say ""'),", the bot will throw an error\nbecause it cannot send an empty message. This is because the string ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/nyxx_commands/latest/nyxx_commands/Converter-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter"))," saw ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," and\ninterpreted it as an empty string - which the bot then tried to send."),(0,r.kt)("p",null,"To counter this, let's create a converter that only allows non-empty strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// Since the converter is going to be passed into a decorator, it must be `const`. As such, any\n// functions used must either be static methods or top-level functions.\n// You can see the implementation of `filterInput` at the bottom of this file.\nconst Converter<String> nonEmptyStringConverter = CombineConverter(stringConverter, filterInput);\n\nChatCommand betterSay = ChatCommand(\n  'better-say',\n  'A better version of the say command',\n  (\n    IChatContext context,\n    @UseConverter(nonEmptyStringConverter) String input,\n  ) {\n    context.respond(MessageBuilder.content(input));\n  },\n);\n\ncommands.addCommand(betterSay);\n\nString? filterInput(String input, Context context) {\n  if (input.isNotEmpty) {\n    return input;\n  }\n  return null;\n}\n")),(0,r.kt)("p",null,"At this point, if you run the file, a new command ",(0,r.kt)("inlineCode",{parentName:"p"},"better-say")," will have been added to the bot.\nAttempting to invoke it with an empty string (",(0,r.kt)("inlineCode",{parentName:"p"},'!better-say ""'),") will cause the argument to\nfail parsing."),(0,r.kt)("p",null,"That's all! Well done, you've reached the end of this guide. You're now able to go and create your own bot on your side.\nRemember; You just need to create a function or a class in a specific file, importing it, and register the function."))}p.isMDXComponent=!0}}]);